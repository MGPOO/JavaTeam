package ec.edu.espe.fashionStore.view;

import com.mongodb.MongoException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.fashionStore.controller.Controller;
import ec.edu.espe.fashionstore.model.Measurement;
import ec.edu.espe.fashionstore.model.Order;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.BsonDocument;
import org.bson.BsonInt64;
import org.bson.conversions.Bson;

/**
 *
 * @author Jonathan Jaguaco, Pythons, DCCO-ESPE
 */
public class FrmFindOrder extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel();
    private static Order order = new Order();

    /**
     * Creates new form FrmReadOrder
     */
    public FrmFindOrder() {
        initComponents();
        mostTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void mostTable() {
        model.addColumn("Order");
        model.addColumn("Name");
        model.addColumn("Phonenumber");
        model.addColumn("Day");
        model.addColumn("Month");
        model.addColumn("Year");
        this.tblOrder.setModel(model);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtOrder = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnFind = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnback = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnDeleteOrder = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Order ID:");

        txtOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOrderKeyTyped(evt);
            }
        });

        jLabel2.setText("Fashion Store");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblOrder);

        btnback.setBackground(new java.awt.Color(153, 255, 153));
        btnback.setText("< Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        jLabel3.setText("Information of the Order");

        btnDeleteOrder.setText("Delete");
        btnDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrderActionPerformed(evt);
            }
        });

        btnUpdateOrder.setText("Update");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFind)))
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(133, 133, 133))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(btnDeleteOrder)
                .addGap(43, 43, 43)
                .addComponent(btnUpdateOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnback)
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback)
                    .addComponent(btnDeleteOrder)
                    .addComponent(btnUpdateOrder))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        MenuOrder backmenu = new MenuOrder();
        backmenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnbackActionPerformed

    private void txtOrderKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderKeyTyped

        char d = evt.getKeyChar();

        if ((Character.isDigit(d)) || (Character.isISOControl(d))) {
            txtOrder.setEditable(true);
        } else {
            txtOrder.setEditable(false);
            JOptionPane.showMessageDialog(this, d + " is not accepted here", "Warning on input data", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_txtOrderKeyTyped

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed

        int id = Integer.parseInt(txtOrder.getText());
        String uri = "mongodb+srv://17POO:password555@fashionstore.nh5mcou.mongodb.net/test";

        try ( MongoClient mongoClient = MongoClients.create(uri)) {
            MongoDatabase database = mongoClient.getDatabase("FashionStore");

            try {
                //Conection with database server
                Bson command = new BsonDocument("ping", new BsonInt64(1));
                org.bson.Document commandResult = database.runCommand(command);
                System.out.println("Connected successfully to server.");
                Measurement measurement = new Measurement();

                order = Controller.readMongo(database, id);

                String[] Datos = new String[6];

                Datos[0] = String.valueOf(order.getId());
                Datos[1] = order.getCustomerName();
                Datos[2] = String.valueOf(order.getPhoneNumber());
                Datos[3] = order.getDay();
                Datos[4] = order.getMonth();
                Datos[5] = order.getYear();

                model.addRow(Datos);

            } catch (MongoException me) {
                System.err.println("An error ocurred while attempting to connect: " + me);
            }
        }

        //order = ConectionMongo.findOrder(order);
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrderActionPerformed
        if (txtOrder.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order ID field is empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
        } else {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to continue?");
            if (option == 0) {

                int id = Integer.parseInt(txtOrder.getText());
                String uri = "mongodb+srv://17POO:password555@fashionstore.nh5mcou.mongodb.net/test";

                try ( MongoClient mongoClient = MongoClients.create(uri)) {
                    MongoDatabase database = mongoClient.getDatabase("FashionStore");

                    try {
                        //Conection with database server
                        Bson command = new BsonDocument("ping", new BsonInt64(1));
                        org.bson.Document commandResult = database.runCommand(command);
                        System.out.println("Connected successfully to server.");
                        Measurement measurement = new Measurement();
                        order = Controller.readMongo(database, id);
                        Controller.deleteMongo(database, order);
                        JOptionPane.showMessageDialog(this, "Order Delete");
                    } catch (MongoException me) {
                        System.err.println("An error ocurred while attempting to connect: " + me);
                    }
                }
            } else if (option == 1) {
                JOptionPane.showMessageDialog(this, "Operation Cancelled");
            } else if (option == 2) {
                MenuOrder backmenu = new MenuOrder();
                backmenu.setVisible(true);
                this.dispose();
            }
        }

    }//GEN-LAST:event_btnDeleteOrderActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed

        if (txtOrder.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order ID field is empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
        } else {
            FrmCreateOrder update = new FrmCreateOrder();
            update.setVisible(true);
            update.txtOrder.setText(String.valueOf(order.getId()));
            update.txtName.setText(order.getCustomerName());
            update.txtPhone.setText(String.valueOf(order.getPhoneNumber()));
            update.cmbDay.setSelectedItem(order.getDay());
            update.cmbMonth.setSelectedItem(order.getMonth());
            update.cmbYear.setSelectedItem(order.getYear());
            update.btnSave.setEnabled(false);
            update.txtOrder.setEnabled(false);
            update.btnUpdateOrder.setEnabled(true);
            update.btnAdd.setEnabled(true);
            update.btnAdd.setText("Edit Measurements");
            this.dispose();
        }

    }//GEN-LAST:event_btnUpdateOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmFindOrder.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmFindOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteOrder;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.JButton btnback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField txtOrder;
    // End of variables declaration//GEN-END:variables
}
